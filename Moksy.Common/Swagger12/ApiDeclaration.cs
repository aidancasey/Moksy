using Newtonsoft.Json;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Moksy.Common.Swagger.Common;

namespace Moksy.Common.Swagger12
{
    /// <summary>
    /// The API Declaration provides information about an API exposed on a resource. There should be one file per Resource described. The file MUST be served in the URL described by the path field.
    /// </summary>
    public class ApiDeclaration
    {
        /// <summary>
        /// Constructor. 
        /// </summary>
        public ApiDeclaration() : this(true)
        {
        }

        /// <summary>
        /// Constructor. 
        /// </summary>
        /// <param name="safe">If true, all values will be given a sensible none-null value. </param>
        public ApiDeclaration(bool safe)
        {
            SwaggerVersion = "1.2";
            BasePath = "http://sdfkjasdfkjhsdkfjhsdkfhsdkjfh.com";

            if (safe)
            {
                ApiVersion = "";
                ResourcePath = "/";
                Produces = new string[0];
                Consumes = new string[0];
                Apis = new Api[0];
            }
            else
            {
            }
        }

        /// <summary>
        /// Required. Specifies the Swagger Specification version being used. It can be used by the Swagger UI and other clients to interpret the API listing. The value MUST be an existing Swagger specification version. 
        /// 
        /// Currently, "1.0", "1.1", "1.2" are valid values.
        /// </summary>
        [Description(@"Required. Specifies the Swagger Specification version being used. It can be used by the Swagger UI and other clients to interpret the API listing. The value MUST be an existing Swagger specification version.  Currently, ""1.0"", ""1.1"", ""1.2"" are valid values.")]
        [JsonProperty(PropertyName="swaggerVersion")]
        public string SwaggerVersion { get; set; }

        /// <summary>
        /// Provides the version of the application API (not to be confused by the specification version).
        /// </summary>
        [Description(@"Provides the version of the application API (not to be confused by the specification version).")]
        [JsonProperty(PropertyName="apiVersion")]
        public string ApiVersion { get; set; }

        /// <summary>
        /// Required. The root URL serving the API. This field is important because while it is common to have the Resource Listing and API Declarations on the server providing the APIs themselves, it is not a requirement. The API specifications can be served using static files and not generated by the API server itself, so the URL for serving the API cannot always be derived from the URL serving the API specification. The value SHOULD be in the format of a URL.
        /// </summary>
        [Description(@"Required. The root URL serving the API. This field is important because while it is common to have the Resource Listing and API Declarations on the server providing the APIs themselves, it is not a requirement. The API specifications can be served using static files and not generated by the API server itself, so the URL for serving the API cannot always be derived from the URL serving the API specification. The value SHOULD be in the format of a URL.")]
        [JsonProperty(PropertyName="basePath")]
        public string BasePath { get; set; }

        /// <summary>
        /// The relative path to the resource, from the basePath, which this API Specification describes. The value MUST precede with a forward slash ("/").
        /// </summary>
        [Description(@"The relative path to the resource, from the basePath, which this API Specification describes. The value MUST precede with a forward slash (""/"").")]
        [JsonProperty(PropertyName="resourcePath")]
        public string ResourcePath { get; set; }

        /// <summary>
        /// A list of MIME types the APIs on this resource can produce. This is global to all APIs but can be overridden on specific API calls.
        /// </summary>
        [Description(@"A list of MIME types the APIs on this resource can produce. This is global to all APIs but can be overridden on specific API calls.")]
        [JsonProperty(PropertyName="produces")]
        public string[] Produces { get; set; }

        ///A list of MIME types the APIs on this resource can consume. This is global to all APIs but can be overridden on specific API calls.
        [Description(@"A list of MIME types the APIs on this resource can consume. This is global to all APIs but can be overridden on specific API calls.")]
        [JsonProperty(PropertyName="consumes")]
        public string[] Consumes { get; set; }

        /// <summary>
        /// Required. A list of the APIs exposed on this resource. There MUST NOT be more than one API Object per path in the array.
        /// </summary>
        [Description(@"Required. A list of the APIs exposed on this resource. There MUST NOT be more than one API Object per path in the array.")]
        [JsonProperty(PropertyName="apis")]
        public Api[] Apis { get; set; }



        /// <summary>
        /// Validate the ApiDeclaration. 
        /// </summary>
        /// <param name="result"></param>
        public void Validate(ViolationCollection result)
        {
            if (null == result) return;

            if (SwaggerVersion != "1.0" && SwaggerVersion != "1.1" && SwaggerVersion != "1.2") result.Add(new Violation() { Code = "SwaggerVersion", Context = "SwaggerVersion", ViolationLevel = ViolationLevel.Error, Description = @"Required. Specifies the Swagger Specification version being used. It can be used by the Swagger UI and other clients to interpret the API listing. The value MUST be an existing Swagger specification version.  Currently, ""1.0"", ""1.1"", ""1.2"" are valid values." });

            ValidationHelpers.ValidateRequiredUrl(BasePath, "BasePath", @"Required. The root URL serving the API. This field is important because while it is common to have the Resource Listing and API Declarations on the server providing the APIs themselves, it is not a requirement. The API specifications can be served using static files and not generated by the API server itself, so the URL for serving the API cannot always be derived from the URL serving the API specification. The value SHOULD be in the format of a URL.", UriKind.Absolute, result);

            if (Apis != null)
            {
                foreach (var api in Apis)
                {
                    var index = Apis.ToList().IndexOf(api);

                    api.Validate(string.Format("Apis[{0}].", index), result);
                }
            }
        }
    }
}
